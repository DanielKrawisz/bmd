// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package rpcproto is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	GetIdentityRequest
	GetIdentityReply
	Object
	SendObjectReply
	GetObjectsRequest
*/
package rpcproto

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// ObjectType is an enum which contains various types of objects.
type ObjectType int32

const (
	ObjectType_GETPUBKEY ObjectType = 0
	ObjectType_PUBKEY    ObjectType = 1
	ObjectType_MESSAGE   ObjectType = 2
	ObjectType_BROADCAST ObjectType = 3
	ObjectType_UNKNOWN   ObjectType = 99
)

var ObjectType_name = map[int32]string{
	0:  "GETPUBKEY",
	1:  "PUBKEY",
	2:  "MESSAGE",
	3:  "BROADCAST",
	99: "UNKNOWN",
}
var ObjectType_value = map[string]int32{
	"GETPUBKEY": 0,
	"PUBKEY":    1,
	"MESSAGE":   2,
	"BROADCAST": 3,
	"UNKNOWN":   99,
}

func (x ObjectType) String() string {
	return proto.EnumName(ObjectType_name, int32(x))
}

type GetIdentityRequest struct {
	// A properly formatted Bitmessage address.
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *GetIdentityRequest) Reset()         { *m = GetIdentityRequest{} }
func (m *GetIdentityRequest) String() string { return proto.CompactTextString(m) }
func (*GetIdentityRequest) ProtoMessage()    {}

type GetIdentityReply struct {
	// Nonce Trials Per Byte: POW parameter.
	NonceTrials uint64 `protobuf:"varint,1,opt,name=nonce_trials" json:"nonce_trials,omitempty"`
	// Extra bytes: POW parameter.
	ExtraBytes uint64 `protobuf:"varint,2,opt,name=extra_bytes" json:"extra_bytes,omitempty"`
	// Uncompressed secp256k1 public key.
	SigningKey []byte `protobuf:"bytes,3,opt,name=signing_key,proto3" json:"signing_key,omitempty"`
	// Uncompressed secp256k1 public key.
	EncryptionKey []byte `protobuf:"bytes,4,opt,name=encryption_key,proto3" json:"encryption_key,omitempty"`
}

func (m *GetIdentityReply) Reset()         { *m = GetIdentityReply{} }
func (m *GetIdentityReply) String() string { return proto.CompactTextString(m) }
func (*GetIdentityReply) ProtoMessage()    {}

type Object struct {
	// Properly serialized object bytes. It includes the object header (but not
	// the Bitmessage message header).
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	// Counter value of the object, as in bmd's database. It is ignored with
	// SendObject.
	Counter uint64 `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}

type SendObjectReply struct {
	// Counter value of the object, as inserted in bmd's database.
	Counter uint64 `protobuf:"varint,1,opt,name=counter" json:"counter,omitempty"`
}

func (m *SendObjectReply) Reset()         { *m = SendObjectReply{} }
func (m *SendObjectReply) String() string { return proto.CompactTextString(m) }
func (*SendObjectReply) ProtoMessage()    {}

type GetObjectsRequest struct {
	// Type of object the client wants to receive.
	ObjectType ObjectType `protobuf:"varint,1,opt,name=object_type,enum=ObjectType" json:"object_type,omitempty"`
	// Counter value the server should start sending object messages from.
	FromCounter uint64 `protobuf:"varint,2,opt,name=from_counter" json:"from_counter,omitempty"`
}

func (m *GetObjectsRequest) Reset()         { *m = GetObjectsRequest{} }
func (m *GetObjectsRequest) String() string { return proto.CompactTextString(m) }
func (*GetObjectsRequest) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("ObjectType", ObjectType_name, ObjectType_value)
}

// Client API for Bmd service

type BmdClient interface {
	GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityReply, error)
	SendObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*SendObjectReply, error)
	GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (Bmd_GetObjectsClient, error)
}

type bmdClient struct {
	cc *grpc.ClientConn
}

func NewBmdClient(cc *grpc.ClientConn) BmdClient {
	return &bmdClient{cc}
}

func (c *bmdClient) GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityReply, error) {
	out := new(GetIdentityReply)
	err := grpc.Invoke(ctx, "/.Bmd/GetIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmdClient) SendObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*SendObjectReply, error) {
	out := new(SendObjectReply)
	err := grpc.Invoke(ctx, "/.Bmd/SendObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmdClient) GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (Bmd_GetObjectsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bmd_serviceDesc.Streams[0], c.cc, "/.Bmd/GetObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &bmdGetObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bmd_GetObjectsClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type bmdGetObjectsClient struct {
	grpc.ClientStream
}

func (x *bmdGetObjectsClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Bmd service

type BmdServer interface {
	GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityReply, error)
	SendObject(context.Context, *Object) (*SendObjectReply, error)
	GetObjects(*GetObjectsRequest, Bmd_GetObjectsServer) error
}

func RegisterBmdServer(s *grpc.Server, srv BmdServer) {
	s.RegisterService(&_Bmd_serviceDesc, srv)
}

func _Bmd_GetIdentity_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetIdentityRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(BmdServer).GetIdentity(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bmd_SendObject_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Object)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(BmdServer).SendObject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Bmd_GetObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BmdServer).GetObjects(m, &bmdGetObjectsServer{stream})
}

type Bmd_GetObjectsServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type bmdGetObjectsServer struct {
	grpc.ServerStream
}

func (x *bmdGetObjectsServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

var _Bmd_serviceDesc = grpc.ServiceDesc{
	ServiceName: ".Bmd",
	HandlerType: (*BmdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdentity",
			Handler:    _Bmd_GetIdentity_Handler,
		},
		{
			MethodName: "SendObject",
			Handler:    _Bmd_SendObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetObjects",
			Handler:       _Bmd_GetObjects_Handler,
			ServerStreams: true,
		},
	},
}
